{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAG3BC,YAAW,WAILN,EACFI,EAAQ,CAACN,WAASC,UAElBM,EAAO,CAACP,WAASC,S,GAElBA,E,IAKMQ,SAASC,cAAc,SAK/BC,iBAAiB,UAEtB,SAAqBC,GACpBA,EAAEC,iBAEC,IAA8BC,EAAAF,EAAEG,OAAOC,SAAjCC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAErBF,EAASG,OAAOH,EAAMI,OACtBH,EAAOE,OAAOF,EAAKG,OACnBF,EAAUC,OAAOD,EAAOE,OACxB,IAAIC,EAAUL,EAEd,GAAIA,EAAQ,EAEV,YADApB,EAAA0B,OAAOC,QAAS,4CAEX,GAAGL,EAAS,EAEjB,YADAtB,EAAA0B,OAAOC,QAAS,8CAIlB,IAAK,IAAIC,EAAQ,EAAGA,EAAQN,EAAO,EAAGM,IACtC1B,EAAc0B,EAAOH,GACpBI,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAA0B,OAAOK,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAE9D6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA0B,OAAOC,QAAQ,sBAAqCK,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAE1DqB,GAAWJ,EAEZN,EAAEmB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    \n\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const isSuccess = true;\n\n      if (shouldResolve) {\n        resolve({position,delay});\n      } else {\n        reject({position,delay});\n      }\n    }, delay);\n  });\n};\n\n\nconst form = document.querySelector(\".form\");\n\n\n\n\nform.addEventListener(\"submit\", startCreate);\n\nfunction startCreate(e) {\n e.preventDefault();\n  \n    let { delay, step, amount } = e.target.elements;\n  \n  delay =  Number(delay.value);\n  step = Number(step.value);\n  amount =  Number(amount.value);\n  let counter = delay;\n  \n  if (delay < 0) {\n    Notify.failure(`The first delay cannot be less than zero`);\n    return;\n  } else if(amount < 1) {  \n    Notify.failure(`The Amount field must be greater than zero`);\n    return;\n  };\n  \n  for (let index = 1; index < amount+1; index++) {\n  createPromise(index, counter)\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    counter += step;\n  }\n   e.currentTarget.reset();\n\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","target","elements","delay1","step","amount","Number","value","counter","Notify","failure","index","then","param","success","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.ee170577.js.map"}